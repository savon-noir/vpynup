#!/usr/bin/env python

import sys
import os
import glob
import optparse
from vpynup import stargate


def main(argv):
    _config_file = None
    optdict = check_options(argv)

    if 'config_file' in optdict:
        _config_file = optdict['config_file']

#    try:
    reqaction = optdict['action']
    if reqaction == 'init':
        stargate.init()
    elif reqaction == 'up':
        stargate.up()
    elif reqaction == 'provision':
        stargate.provision()
    elif reqaction == 'status':
        istatus = stargate.status()
        print("instance status: {0}".format(istatus))
    elif reqaction == 'hostname':
        ihostname = stargate.gate_hostname()
        print("instance hostname: {0}".format(ihostname))
    elif reqaction == 'reboot':
        stargate.reboot()
    elif reqaction == 'destroy':
        stargate.terminate()
    elif reqaction == 'halt':
        stargate.stop()
#    except Exception as e:
#        sys.stderr.write("Unhandled exception: state saved")
#        sys.stderr.write("Exception message: {0}".format(e.message))


def config_path_check(config_path=None):
    default_config = "vpinup.json"
    config_file = None

    if config_path is not None and os.path.exists(config_path):
        config_file = config_path
    else:
        flist = glob.glob("*.json")
        if default_config in flist:
            config_file = default_config
    return config_file


def check_options(argv):
    optdict = {}
    vpin_actions = ['init', 'up', 'provision', 'halt', 'ssh', 'status', 'destroy', 'hostname', 'reboot']

    parser = optparse.OptionParser()
    parser.add_option('--config', action="store", dest="config_file")
    (options, args) = parser.parse_args(argv)

    if len(args) != 1 or args[0] not in vpin_actions:
        sys.stderr.write("No proper actions submited\n")
        usage()
        sys.exit(1)
    else:
        optdict['action'] = args[0]

    if options.config_file is not None:
        optdict['config_file'] = options.config_file
    else:
        optdict['config_file'] = config_path_check()

    if 'config_file' not in optdict:
        sys.stderr.write("No config file provided or default.json "
                         "does not exists in local folder: run vpin init\n")
        usage()
        sys.exit(1)

    return optdict


def usage():
    sys.stderr.write("usage: vpyn [--config <config_name.json>] <action>\n\n")
    sys.stderr.write("actions are:\n")
    sys.stderr.write("\tinit - create environment in local directory\n")
    sys.stderr.write("\tup - to deploy and provision a vm in the cloud\n")
    sys.stderr.write("\tprovision - provision a deployed vm in the cloud\n")
    sys.stderr.write("\tssh - ssh to the deployed vm instance\n")
    sys.stderr.write("\thalt - halt the deployed vm instance\n")

    sys.exit(1)

if __name__ == "__main__":
    main(sys.argv[1:])
